/*
 * СберСпасибо | Призолов
 *
 * Все формы передаются в формате multipart/form-data, ответы от сервера приходят в виде json.
 *
 * OpenAPI spec version: 1-oas3
 * Contact: sajvv@hismith.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Task : IEquatable<Task>
    { 
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Краткое название
        /// </summary>
        /// <value>Краткое название</value>
        [Required]
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Полный заголовок
        /// </summary>
        /// <value>Полный заголовок</value>
        [Required]
        [DataMember(Name="openTopic")]
        public string OpenTopic { get; set; }

        /// <summary>
        /// Описание
        /// </summary>
        /// <value>Описание</value>
        [Required]
        [DataMember(Name="openMessage")]
        public string OpenMessage { get; set; }

        /// <summary>
        /// Заголовок при закрытии
        /// </summary>
        /// <value>Заголовок при закрытии</value>
        [Required]
        [DataMember(Name="closeTopic")]
        public string CloseTopic { get; set; }

        /// <summary>
        /// Описание при закрытии
        /// </summary>
        /// <value>Описание при закрытии</value>
        [Required]
        [DataMember(Name="closeMessage")]
        public string CloseMessage { get; set; }

        /// <summary>
        /// Сортировка
        /// </summary>
        /// <value>Сортировка</value>
        [Required]
        [DataMember(Name="position")]
        public int? Position { get; set; }

        /// <summary>
        /// Приз за выполнение (id)
        /// </summary>
        /// <value>Приз за выполнение (id)</value>
        [Required]
        [DataMember(Name="prize")]
        public int? Prize { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image")]
        public TaskImage Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Task {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  OpenTopic: ").Append(OpenTopic).Append("\n");
            sb.Append("  OpenMessage: ").Append(OpenMessage).Append("\n");
            sb.Append("  CloseTopic: ").Append(CloseTopic).Append("\n");
            sb.Append("  CloseMessage: ").Append(CloseMessage).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Prize: ").Append(Prize).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Task)obj);
        }

        /// <summary>
        /// Returns true if Task instances are equal
        /// </summary>
        /// <param name="other">Instance of Task to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Task other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    OpenTopic == other.OpenTopic ||
                    OpenTopic != null &&
                    OpenTopic.Equals(other.OpenTopic)
                ) && 
                (
                    OpenMessage == other.OpenMessage ||
                    OpenMessage != null &&
                    OpenMessage.Equals(other.OpenMessage)
                ) && 
                (
                    CloseTopic == other.CloseTopic ||
                    CloseTopic != null &&
                    CloseTopic.Equals(other.CloseTopic)
                ) && 
                (
                    CloseMessage == other.CloseMessage ||
                    CloseMessage != null &&
                    CloseMessage.Equals(other.CloseMessage)
                ) && 
                (
                    Position == other.Position ||
                    Position != null &&
                    Position.Equals(other.Position)
                ) && 
                (
                    Prize == other.Prize ||
                    Prize != null &&
                    Prize.Equals(other.Prize)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.Equals(other.Image)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (OpenTopic != null)
                    hashCode = hashCode * 59 + OpenTopic.GetHashCode();
                    if (OpenMessage != null)
                    hashCode = hashCode * 59 + OpenMessage.GetHashCode();
                    if (CloseTopic != null)
                    hashCode = hashCode * 59 + CloseTopic.GetHashCode();
                    if (CloseMessage != null)
                    hashCode = hashCode * 59 + CloseMessage.GetHashCode();
                    if (Position != null)
                    hashCode = hashCode * 59 + Position.GetHashCode();
                    if (Prize != null)
                    hashCode = hashCode * 59 + Prize.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Task left, Task right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Task left, Task right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
