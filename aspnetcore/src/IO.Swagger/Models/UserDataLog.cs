/*
 * СберСпасибо | Призолов
 *
 * Все формы передаются в формате multipart/form-data, ответы от сервера приходят в виде json.
 *
 * OpenAPI spec version: 1-oas3
 * Contact: sajvv@hismith.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserDataLog : IEquatable<UserDataLog>
    { 
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [Required]
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Дата и время события
        /// </summary>
        /// <value>Дата и время события</value>
        [Required]
        [DataMember(Name="dateCreated")]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// Тип
        /// </summary>
        /// <value>Тип</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CreatedEnum for created
            /// </summary>
            [EnumMember(Value = "created")]
            CreatedEnum = 0,
            /// <summary>
            /// Enum UpdatedEnum for updated
            /// </summary>
            [EnumMember(Value = "updated")]
            UpdatedEnum = 1        }

        /// <summary>
        /// Тип
        /// </summary>
        /// <value>Тип</value>
        [Required]
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// IP пользователя
        /// </summary>
        /// <value>IP пользователя</value>
        [Required]
        [DataMember(Name="userIp")]
        public string UserIp { get; set; }

        /// <summary>
        /// Изначальные данные
        /// </summary>
        /// <value>Изначальные данные</value>
        [Required]
        [DataMember(Name="oldData")]
        public List<> OldData { get; set; }

        /// <summary>
        /// Новые данные
        /// </summary>
        /// <value>Новые данные</value>
        [Required]
        [DataMember(Name="newData")]
        public List<> NewData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDataLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserIp: ").Append(UserIp).Append("\n");
            sb.Append("  OldData: ").Append(OldData).Append("\n");
            sb.Append("  NewData: ").Append(NewData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserDataLog)obj);
        }

        /// <summary>
        /// Returns true if UserDataLog instances are equal
        /// </summary>
        /// <param name="other">Instance of UserDataLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDataLog other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    UserIp == other.UserIp ||
                    UserIp != null &&
                    UserIp.Equals(other.UserIp)
                ) && 
                (
                    OldData == other.OldData ||
                    OldData != null &&
                    OldData.SequenceEqual(other.OldData)
                ) && 
                (
                    NewData == other.NewData ||
                    NewData != null &&
                    NewData.SequenceEqual(other.NewData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (UserIp != null)
                    hashCode = hashCode * 59 + UserIp.GetHashCode();
                    if (OldData != null)
                    hashCode = hashCode * 59 + OldData.GetHashCode();
                    if (NewData != null)
                    hashCode = hashCode * 59 + NewData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserDataLog left, UserDataLog right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserDataLog left, UserDataLog right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
