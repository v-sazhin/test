/*
 * СберСпасибо | Призолов
 *
 * Все формы передаются в формате multipart/form-data, ответы от сервера приходят в виде json.
 *
 * OpenAPI spec version: 1-oas3
 * Contact: sajvv@hismith.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class User : IEquatable<User>
    { 
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [Required]
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Массив с названием ролей
        /// </summary>
        /// <value>Массив с названием ролей</value>
        [Required]
        [DataMember(Name="roles")]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Пароль (захэшированный)
        /// </summary>
        /// <value>Пароль (захэшированный)</value>
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// Название
        /// </summary>
        /// <value>Название</value>
        [Required]
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Код доступа
        /// </summary>
        /// <value>Код доступа</value>
        [DataMember(Name="accessCode")]
        public string AccessCode { get; set; }

        /// <summary>
        /// Попытки входа
        /// </summary>
        /// <value>Попытки входа</value>
        [Required]
        [DataMember(Name="attempts")]
        public int? Attempts { get; set; }

        /// <summary>
        /// Дата блокировки
        /// </summary>
        /// <value>Дата блокировки</value>
        [Required]
        [DataMember(Name="blockDate")]
        public DateTime? BlockDate { get; set; }

        /// <summary>
        /// Полностью зарегистрирован
        /// </summary>
        /// <value>Полностью зарегистрирован</value>
        [Required]
        [DataMember(Name="isRegistered")]
        public bool? IsRegistered { get; set; }

        /// <summary>
        /// Доступность
        /// </summary>
        /// <value>Доступность</value>
        [Required]
        [DataMember(Name="isEnabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Аккаунт (сущность Account)
        /// </summary>
        /// <value>Аккаунт (сущность Account)</value>
        [Required]
        [DataMember(Name="account")]
        public int? Account { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  AccessCode: ").Append(AccessCode).Append("\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  BlockDate: ").Append(BlockDate).Append("\n");
            sb.Append("  IsRegistered: ").Append(IsRegistered).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Roles == other.Roles ||
                    Roles != null &&
                    Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    AccessCode == other.AccessCode ||
                    AccessCode != null &&
                    AccessCode.Equals(other.AccessCode)
                ) && 
                (
                    Attempts == other.Attempts ||
                    Attempts != null &&
                    Attempts.Equals(other.Attempts)
                ) && 
                (
                    BlockDate == other.BlockDate ||
                    BlockDate != null &&
                    BlockDate.Equals(other.BlockDate)
                ) && 
                (
                    IsRegistered == other.IsRegistered ||
                    IsRegistered != null &&
                    IsRegistered.Equals(other.IsRegistered)
                ) && 
                (
                    IsEnabled == other.IsEnabled ||
                    IsEnabled != null &&
                    IsEnabled.Equals(other.IsEnabled)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Roles != null)
                    hashCode = hashCode * 59 + Roles.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (AccessCode != null)
                    hashCode = hashCode * 59 + AccessCode.GetHashCode();
                    if (Attempts != null)
                    hashCode = hashCode * 59 + Attempts.GetHashCode();
                    if (BlockDate != null)
                    hashCode = hashCode * 59 + BlockDate.GetHashCode();
                    if (IsRegistered != null)
                    hashCode = hashCode * 59 + IsRegistered.GetHashCode();
                    if (IsEnabled != null)
                    hashCode = hashCode * 59 + IsEnabled.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(User left, User right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(User left, User right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
