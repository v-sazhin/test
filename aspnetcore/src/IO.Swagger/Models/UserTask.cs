/*
 * СберСпасибо | Призолов
 *
 * Все формы передаются в формате multipart/form-data, ответы от сервера приходят в виде json.
 *
 * OpenAPI spec version: 1-oas3
 * Contact: sajvv@hismith.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserTask : IEquatable<UserTask>
    { 
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [Required]
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Задание (сущность Task)
        /// </summary>
        /// <value>Задание (сущность Task)</value>
        [Required]
        [DataMember(Name="task")]
        public int? Task { get; set; }

        /// <summary>
        /// Аккаунт (сущность Account)
        /// </summary>
        /// <value>Аккаунт (сущность Account)</value>
        [Required]
        [DataMember(Name="account")]
        public int? Account { get; set; }

        /// <summary>
        /// Дата и время создания
        /// </summary>
        /// <value>Дата и время создания</value>
        [Required]
        [DataMember(Name="dateCreated")]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// Дата и время выполнения
        /// </summary>
        /// <value>Дата и время выполнения</value>
        [DataMember(Name="dateCompleted")]
        public DateTime? DateCompleted { get; set; }

        /// <summary>
        /// Дата начала задания
        /// </summary>
        /// <value>Дата начала задания</value>
        [Required]
        [DataMember(Name="dateStart")]
        public DateTime? DateStart { get; set; }

        /// <summary>
        /// Дата окончания задания
        /// </summary>
        /// <value>Дата окончания задания</value>
        [Required]
        [DataMember(Name="dateFinish")]
        public DateTime? DateFinish { get; set; }

        /// <summary>
        /// Просмотрено
        /// </summary>
        /// <value>Просмотрено</value>
        [Required]
        [DataMember(Name="isViewed")]
        public bool? IsViewed { get; set; }

        /// <summary>
        /// Выполнено
        /// </summary>
        /// <value>Выполнено</value>
        [Required]
        [DataMember(Name="isCompleted")]
        public bool? IsCompleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserTask {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateCompleted: ").Append(DateCompleted).Append("\n");
            sb.Append("  DateStart: ").Append(DateStart).Append("\n");
            sb.Append("  DateFinish: ").Append(DateFinish).Append("\n");
            sb.Append("  IsViewed: ").Append(IsViewed).Append("\n");
            sb.Append("  IsCompleted: ").Append(IsCompleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserTask)obj);
        }

        /// <summary>
        /// Returns true if UserTask instances are equal
        /// </summary>
        /// <param name="other">Instance of UserTask to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserTask other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Task == other.Task ||
                    Task != null &&
                    Task.Equals(other.Task)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    DateCompleted == other.DateCompleted ||
                    DateCompleted != null &&
                    DateCompleted.Equals(other.DateCompleted)
                ) && 
                (
                    DateStart == other.DateStart ||
                    DateStart != null &&
                    DateStart.Equals(other.DateStart)
                ) && 
                (
                    DateFinish == other.DateFinish ||
                    DateFinish != null &&
                    DateFinish.Equals(other.DateFinish)
                ) && 
                (
                    IsViewed == other.IsViewed ||
                    IsViewed != null &&
                    IsViewed.Equals(other.IsViewed)
                ) && 
                (
                    IsCompleted == other.IsCompleted ||
                    IsCompleted != null &&
                    IsCompleted.Equals(other.IsCompleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Task != null)
                    hashCode = hashCode * 59 + Task.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    if (DateCompleted != null)
                    hashCode = hashCode * 59 + DateCompleted.GetHashCode();
                    if (DateStart != null)
                    hashCode = hashCode * 59 + DateStart.GetHashCode();
                    if (DateFinish != null)
                    hashCode = hashCode * 59 + DateFinish.GetHashCode();
                    if (IsViewed != null)
                    hashCode = hashCode * 59 + IsViewed.GetHashCode();
                    if (IsCompleted != null)
                    hashCode = hashCode * 59 + IsCompleted.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserTask left, UserTask right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserTask left, UserTask right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
